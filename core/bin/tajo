#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# The Tajo command script
#
# Environment Variables
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   TAJO_CLASSPATH Extra Java CLASSPATH entries.
#
#   TAJO_USER_CLASSPATH_FIRST      When defined, the TAJO_CLASSPATH is 
#                                    added in the beginning of the global
#                                    classpath. Can be defined, for example,
#                                    by doing 
#                                    export TAJO_USER_CLASSPATH_FIRST=true
#
#   TAJO_HEAPSIZE  The maximum amount of heap to use, in MB. 
#                    Default is 1000.
#
#   TAJO_OPTS      Extra Java runtime options.
#   
#   TAJO_NAMENODE_OPTS       These options are added to TAJO_OPTS 
#   TAJO_CLIENT_OPTS         when the respective command is run.
#   TAJO_{COMMAND}_OPTS etc  TAJO_JT_OPTS applies to JobTracker 
#                              for e.g.  TAJO_CLIENT_OPTS applies to 
#                              more than one command (fs, dfs, fsck, 
#                              dfsadmin etc)  
#
#   TAJO_CONF_DIR  Alternate conf dir. Default is ${TAJO_HOME}/conf.
#
#   TAJO_ROOT_LOGGER The root appender. Default is INFO,console
#

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

. "$bin"/tajo-config.sh

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: tajo [--config confdir] COMMAND"
  echo "where COMMAND is one of:"
  echo "  master               run the Master Server"
  echo "  zkserver             run the Zookeeper Server"
  echo "  catalog              run the Catalog server"
  echo "  catutil			   catalog utility"
  echo "  leafserver           run the Leaf Server"
  echo "  cluster              cluster Utility"
  echo "  cli                  run the tajo cli"
  echo "  jar <jar>            run a jar file"
  echo "  benchmark            run the benchmark driver"
  echo " or"
  echo "  CLASSNAME            run the class named CLASSNAME"
  echo "Most commands print help when invoked w/o parameters."
  exit 1
fi

# get arguments
COMMAND=$1
shift

if [ -f "${TAJO_CONF_DIR}/tajo-env.sh" ]; then
  . "${TAJO_CONF_DIR}/tajo-env.sh"
fi

# Determine if we're starting a secure datanode, and if so, redefine appropriate variables
if [ "$COMMAND" == "datanode" ] && [ "$EUID" -eq 0 ] && [ -n "$TAJO_SECURE_DN_USER" ]; then
  TAJO_PID_DIR=$TAJO_SECURE_DN_PID_DIR
  TAJO_LOG_DIR=$TAJO_SECURE_DN_LOG_DIR
  TAJO_IDENT_STRING=$TAJO_SECURE_DN_USER
  starting_secure_dn="true"
fi

# some Java parameters
if [ "$JAVA_HOME" != "" ]; then
  #echo "run java in $JAVA_HOME"
  JAVA_HOME=$JAVA_HOME
fi
  
if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m 

# check envvars which might override default args
if [ "$TAJO_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $TAJO_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$TAJO_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# CLASSPATH initially contains $TAJO_CONF_DIR
CLASSPATH="${TAJO_CONF_DIR}"
for f in $TAJO_CONF_DIR/*.xml; do
  CLASSPATH=${CLASSPATH}:$f;
done

if [ "$TAJO_USER_CLASSPATH_FIRST" != "" ] && [ "$TAJO_CLASSPATH" != "" ] ; then
  CLASSPATH=${CLASSPATH}:${TAJO_CLASSPATH}
fi
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar

# for developers, add Tajo classes to CLASSPATH
if [ -d "$TAJO_HOME/target/classes" ]; then
  CLASSPATH=${CLASSPATH}:$TAJO_HOME/target/classes
fi
if [ -d "$TAJO_HOME/target/test/classes" ]; then
  CLASSPATH=${CLASSPATH}:$TAJO_HOME/target/test/classes
fi

# so that filenames w/ spaces are handled correctly in loops below
IFS=

# for releases, add tajo jar to CLASSPATH
for f in $TAJO_HOME/tajo-*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $TAJO_HOME/nta-*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

# add libs to CLASSPATH
for f in $TAJO_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

# add user-specified CLASSPATH last
if [ "$TAJO_USER_CLASSPATH_FIRST" = "" ] && [ "$TAJO_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${TAJO_CLASSPATH}
fi

# default log directory & file
if [ "$TAJO_LOG_DIR" = "" ]; then
  TAJO_LOG_DIR="$TAJO_HOME/logs"
fi
if [ "$TAJO_LOGFILE" = "" ]; then
  TAJO_LOGFILE='tajo.log'
fi

# default policy file for service-level authorization
if [ "$TAJO_POLICYFILE" = "" ]; then
  TAJO_POLICYFILE="tajo-policy.xml"
fi

# restore ordinary behaviour
unset IFS

# figure out which class to run
if [ "$COMMAND" = "classpath" ] ; then
  if $cygwin; then
    CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  fi
  echo $CLASSPATH
  exit
elif [ "$COMMAND" = "master" ] ; then
  CLASS='tajo.master.TajoMaster'
  TAJO_OPTS="$TAJO_OPTS $TAJO_MASTER_OPTS"
elif [ "$COMMAND" = "catalog" ] ; then
  CLASS='tajo.catalog.CatalogServer'
  TAJO_OPTS="$TAJO_OPTS $TAJO_CATALOG_OPTS"
elif [ "$COMMAND" = "catutil" ] ; then
  CLASS='tajo.catalog.CatalogUtil'
  TAJO_OPTS="$TAJO_OPTS $TAJO_CATALOG_OPTS"
elif [ "$COMMAND" = "zkserver" ] ; then
  CLASS='tajo.zookeeper.ZkServer'
  TAJO_OPTS="$TAJO_OPTS $TAJO_ZKSERVER_OPTS"
elif [ "$COMMAND" = "leafserver" ] ; then
  CLASS='tajo.worker.LeafServer'
  TAJO_OPTS="$TAJO_OPTS $TAJO_ZKSERVER_OPTS"
elif [ "$COMMAND" = "cluster" ] ; then
  CLASS='tajo.engine.cluster.ClusterUtil'
  TAJO_OPTS="$TAJO_OPTS $TAJO_ZKSERVER_OPTS"
elif [ "$COMMAND" = "cli" ] ; then
  CLASS='tajo.cli.TajoCli'
  TAJO_OPTS="$TAJO_OPTS $TAJO_ZKSERVER_OPTS"
elif [ "$COMMAND" = "benchmark" ] ; then
  CLASS='tajo.benchmark.Driver'
  TAJO_OPTS="$TAJO_OPTS $TAJO_ZKSERVER_OPTS"
else
  CLASS=$COMMAND
fi

# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  TAJO_HOME=`cygpath -w "$TAJO_HOME"`
  TAJO_LOG_DIR=`cygpath -w "$TAJO_LOG_DIR"`
  TOOL_PATH=`cygpath -p -w "$TOOL_PATH"`
fi
# setup 'java.library.path' for native-tajo code if necessary
JAVA_LIBRARY_PATH=''
if [ -d "${TAJO_HOME}/build/native" -o -d "${TAJO_HOME}/lib/native" ]; then
  JAVA_PLATFORM=`CLASSPATH=${CLASSPATH} ${JAVA} -Xmx32m ${TAJO_JAVA_PLATFORM_OPTS} org.apache.tajo.util.PlatformName | sed -e "s/ /_/g"`
  
  if [ -d "$TAJO_HOME/build/native" ]; then
    JAVA_LIBRARY_PATH=${TAJO_HOME}/build/native/${JAVA_PLATFORM}/lib
  fi
  
  if [ -d "${TAJO_HOME}/lib/native" ]; then
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
      JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:${TAJO_HOME}/lib/native/${JAVA_PLATFORM}
    else
      JAVA_LIBRARY_PATH=${TAJO_HOME}/lib/native/${JAVA_PLATFORM}
    fi
  fi
fi

# cygwin path translation
if $cygwin; then
  JAVA_LIBRARY_PATH=`cygpath -p "$JAVA_LIBRARY_PATH"`
fi

TAJO_OPTS="$TAJO_OPTS -Dtajo.log.dir=$TAJO_LOG_DIR"
TAJO_OPTS="$TAJO_OPTS -Dtajo.log.file=$TAJO_LOGFILE"
TAJO_OPTS="$TAJO_OPTS -Dtajo.home.dir=$TAJO_HOME"
TAJO_OPTS="$TAJO_OPTS -Dtajo.id.str=$TAJO_IDENT_STRING"
TAJO_OPTS="$TAJO_OPTS -Dtajo.root.logger=${TAJO_ROOT_LOGGER:-INFO,console}"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  TAJO_OPTS="$TAJO_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi  
TAJO_OPTS="$TAJO_OPTS -Dtajo.policy.file=$TAJO_POLICYFILE"

# Check to see if we should start a secure datanode
if [ "$starting_secure_dn" = "true" ]; then
  if [ "$TAJO_PID_DIR" = "" ]; then
    TAJO_SECURE_DN_PID="/tmp/tajo_secure_dn.pid"
  else
   TAJO_SECURE_DN_PID="$TAJO_PID_DIR/tajo_secure_dn.pid"
  fi

  exec "$TAJO_HOME/bin/jsvc" -Dproc_$COMMAND -outfile "$TAJO_LOG_DIR/jsvc.out" \
                                               -errfile "$TAJO_LOG_DIR/jsvc.err" \
                                               -pidfile "$TAJO_SECURE_DN_PID" \
                                               -nodetach \
                                               -user "$TAJO_SECURE_DN_USER" \
                                               -cp "$CLASSPATH" \
                                               $JAVA_HEAP_MAX $TAJO_OPTS \
                                               org.apache.tajo.hdfs.server.datanode.SecureDataNodeStarter "$@"
else
  # run it
  exec "$JAVA" -Dproc_$COMMAND $JAVA_HEAP_MAX $TAJO_OPTS -classpath "$CLASSPATH" $CLASS "$@"
fi
