/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.tajo.engine.planner;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.fs.Path;
import org.apache.tajo.algebra.*;
import org.apache.tajo.catalog.*;
import org.apache.tajo.catalog.function.AggFunction;
import org.apache.tajo.catalog.function.GeneralFunction;
import org.apache.tajo.catalog.proto.CatalogProtos;
import org.apache.tajo.common.TajoDataTypes;
import org.apache.tajo.common.TajoDataTypes.DataType;
import org.apache.tajo.datum.DatumFactory;
import org.apache.tajo.engine.eval.*;
import org.apache.tajo.engine.eval.EvalNode.Type;
import org.apache.tajo.engine.planner.LogicalPlan.QueryBlock;
import org.apache.tajo.engine.planner.logical.*;
import org.apache.tajo.engine.query.exception.InvalidQueryException;
import org.apache.tajo.engine.query.exception.NotSupportQueryException;
import org.apache.tajo.engine.query.exception.UndefinedFunctionException;
import org.apache.tajo.engine.utils.SchemaUtil;
import org.apache.tajo.exception.InternalException;

import java.util.List;
import java.util.Stack;

import static org.apache.tajo.algebra.Aggregation.GroupType;

/**
 * This class creates a logical plan from a parse tree ({@link org.apache.tajo.engine.parser.SQLAnalyzer})
 * generated by {@link org.apache.tajo.engine.parser.SQLAnalyzer}.
 *
 * @see org.apache.tajo.engine.parser
 */
public class LogicalPlanner {
  private static Log LOG = LogFactory.getLog(LogicalPlanner.class);
  private final CatalogService catalog;

  public LogicalPlanner(CatalogService catalog) {
    this.catalog = catalog;
  }

  /**
   * This generates a logical plan.
   *
   * @param expr A relational algebraic expression for a query.
   * @return A logical plan
   */
  public LogicalPlan createPlan(Expr expr) {

    LogicalPlan plan = new LogicalPlan(this);
    LogicalNode subroot = null;

    Stack<ExprType> stack =
        new Stack<ExprType>();

    QueryBlock rootBlock = plan.newAndGetBlock(LogicalPlan.ROOT_BLOCK);
    try {
      subroot = createPlanInternal(plan, rootBlock, expr, stack);
    } catch (CloneNotSupportedException e) {
      throw new InvalidQueryException(e);
    } catch (VerifyException e) {
      e.printStackTrace();
    }

    LogicalRootNode root = new LogicalRootNode();
    root.setInSchema(subroot.getOutSchema());
    root.setOutSchema(subroot.getOutSchema());
    root.setSubNode(subroot);
    plan.getRootBlock().setRoot(root);

    return plan;
  }

  /**
   * Relational operators can be divided into two categories as follows:
   * <oi>
   *  <li>General operator: this type operators do not affect tuple schema and do not evaluate
   *  expressions. Selection, Sort, and Limit belong to this operator.</li>
   *  <li>Projectable operator: this type operators affects tuple schema and evaluate expressions.
   *  Scan, Groupby, and Join belong to this operators.
   *  </li>
   * </oi>
   */
  private LogicalNode createPlanInternal(LogicalPlan plan, QueryBlock block, Expr expr, Stack<ExprType> stack)
      throws CloneNotSupportedException, VerifyException {
    LogicalNode currentNode;
    QueryBlock currentBlock = checkNewBlockAndGet(plan, block.getName());

    switch(expr.getType()) {
      case Projection:
        Projection projection = (Projection) expr;
        currentNode = buildProjectionNode(plan, currentBlock, projection, stack);
        break;

      case Filter:
        Selection selection = (Selection) expr;
        currentNode = buildSelectionNode(plan, currentBlock, selection, stack);
        break;

      case Aggregation:
        Aggregation aggregation = (Aggregation) expr;
        currentNode = buildGroupingPlan(plan, currentBlock, aggregation, stack);
        break;

      case Join:
        Join join = (Join) expr;
        currentNode = buildExplicitJoinPlan(plan, currentBlock, join, stack);
        break;

      case Sort:
        Sort sort = (Sort) expr;
        currentNode = buildSortPlan(plan, currentBlock, sort, stack);
        break;

      case Limit:
        Limit limit = (Limit) expr;
        currentNode = buildLimitPlan(plan, currentBlock, limit, stack);
        break;

      case Union:
      case Except:
      case Intersect:
        SetOperation setOp = (SetOperation) expr;
        currentNode = buildSetPlan(plan, currentBlock, setOp, stack);
        break;


      case RelationList:
        currentNode = buildRelationListPlan(plan, currentBlock, (RelationList) expr, stack);
        if (((RelationList) expr).size() == 1) { // skip visitPost because it is already visited
          return currentNode;
        }
        break;

      case Relation:
        currentNode = buildScanPlan(currentBlock, expr);
        break;

      case CreateTable:
        CreateTable createTable = (CreateTable) expr;
        currentNode = buildCreateTable(plan, currentBlock, createTable, stack);
        break;

      case DropTable:
        DropTable dropTable = (DropTable) expr;
        currentNode = buildDropTable(dropTable);
        break;

      default:
        throw new NotSupportQueryException(expr.getType().name());
    }

    // mark the node as the visited node and do post work for each operator
    plan.postVisit(block.getName(), currentNode, stack);
    // check and set evaluated targets and update in/out schemas
    currentBlock.checkAndSetEvaluatedTargets(currentNode);
    return currentNode;
  }

  /**
   * It checks if the first node in this query block. If not, it creates and adds a new query block.
   * In addition, it always returns the query block corresponding to the block name.
   */
  private QueryBlock checkNewBlockAndGet(LogicalPlan plan, String blockName) {
    QueryBlock block = plan.getBlock(blockName);
    if (block == null) {
      return plan.newAndGetBlock(blockName);
    } else {
      return block;
    }
  }

  private ScanNode buildScanPlan(QueryBlock block, Expr expr)
      throws VerifyException {
    // 1. init phase

    // 2. build child plans
    // 3. build scan plan
    Relation relation = (Relation) expr;
    TableDesc desc = catalog.getTableDesc(relation.getName());
    FromTable fromTable = new FromTable(desc);

    if (relation.hasAlias()) {
      fromTable.setAlias(relation.getAlias());
    }

    ScanNode scanNode = new ScanNode(fromTable);

    return scanNode;
  }

  /*===============================================================================================
    JOIN SECTION
   ===============================================================================================*/
  private LogicalNode buildRelationListPlan(LogicalPlan plan, QueryBlock block,
                                            RelationList relations, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {

    LogicalNode current = createPlanInternal(plan, block, relations.getRelations()[0], stack);

    LogicalNode left;
    LogicalNode right;
    if (relations.size() > 1) {

      for (int i = 1; i < relations.size(); i++) {
        left = current;
        right = createPlanInternal(plan, block, relations.getRelations()[i], stack);
        current = createCatasianProduct(left, right);
      }
    }

    return current;
  }

  private LogicalNode buildExplicitJoinPlan(LogicalPlan plan, QueryBlock block, Join join, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {
    // Phase 1: Init
    // Phase 2: build child plans
    stack.push(ExprType.JOIN);
    LogicalNode left = createPlanInternal(plan, block, join.getLeft(), stack);
    LogicalNode right = createPlanInternal(plan, block, join.getRight(), stack);
    stack.pop();

    // Phase 3: build this plan
    JoinNode joinNode = new JoinNode(join.getJoinType(), left, right);

    // Set A merged input schema
    Schema merged;
    if (join.isNatural()) {
      merged = getNaturalJoin(left, right);
    } else {
      merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());
    }
    joinNode.setInSchema(merged);
    joinNode.setOutSchema(merged);

    // Determine join conditions
    if (join.isNatural()) { // if natural join, it should have the equi-join conditions by common column names
      Schema leftSchema = joinNode.getOuterNode().getInSchema();
      Schema rightSchema = joinNode.getInnerNode().getInSchema();
      Schema commons = SchemaUtil.getCommons(leftSchema, rightSchema);
      EvalNode njCond = getNaturalJoinCondition(leftSchema, rightSchema, commons);
      joinNode.setJoinQual(njCond);
    } else if (join.hasQual()) { // otherwise, the given join conditions are set
      joinNode.setJoinQual(createEvalTree(plan, block.getName(), join.getQual()));
    }

    return joinNode;
  }

  private static EvalNode getNaturalJoinCondition(Schema outer, Schema inner, Schema commons) {
    EvalNode njQual = null;
    EvalNode equiQual;

    Column leftJoinKey;
    Column rightJoinKey;
    for (Column common : commons.getColumns()) {
      leftJoinKey = outer.getColumnByName(common.getColumnName());
      rightJoinKey = inner.getColumnByName(common.getColumnName());
      equiQual = new BinaryEval(EvalNode.Type.EQUAL,
          new FieldEval(leftJoinKey), new FieldEval(rightJoinKey));
      if (njQual == null) {
        njQual = equiQual;
      } else {
        njQual = new BinaryEval(EvalNode.Type.AND,
            njQual, equiQual);
      }
    }

    return njQual;
  }

  private static LogicalNode createCatasianProduct(LogicalNode left, LogicalNode right) {
    JoinNode join = new JoinNode(JoinType.CROSS_JOIN, left, right);
    Schema joinSchema = SchemaUtil.merge(
        join.getOuterNode().getOutSchema(),
        join.getInnerNode().getOutSchema());
    join.setInSchema(joinSchema);
    join.setOutSchema(joinSchema);

    return join;
  }

  private static Schema getNaturalJoin(LogicalNode outer, LogicalNode inner) {
    Schema joinSchema = new Schema();
    Schema commons = SchemaUtil.getCommons(outer.getOutSchema(),
        inner.getOutSchema());
    joinSchema.addColumns(commons);
    for (Column c : outer.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }

    for (Column c : inner.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }
    return joinSchema;
  }

  /*===============================================================================================
    SET OPERATION SECTION
   ===============================================================================================*/
  private LogicalNode buildSetPlan(LogicalPlan plan, QueryBlock block, SetOperation setOperation,
                                   Stack<ExprType> stack) throws VerifyException, CloneNotSupportedException {
    LogicalNode left;
    LogicalNode right;

    QueryBlock leftBlock = plan.newAnonymousBlock();
    Stack<ExprType> leftStack = new Stack<ExprType>();
    left = createPlanInternal(plan, leftBlock, setOperation.getLeft(), leftStack);
    Stack<ExprType> rightStack = new Stack<ExprType>();
    QueryBlock rightBlock = plan.newAnonymousBlock();
    right = createPlanInternal(plan, rightBlock, setOperation.getRight(), rightStack);

    verifySetStatement(setOperation.getType(), leftBlock, rightBlock);

    BinaryNode setOp;
    if (setOperation.getType() == OpType.Union) {
      setOp = new UnionNode(left, right);
    } else if (setOperation.getType() == OpType.Except) {
      setOp = new ExceptNode(left, right);
    } else if (setOperation.getType() == OpType.Intersect) {
      setOp = new IntersectNode(left, right);
    } else {
      throw new VerifyException(setOperation.toJson());
    }

    // Strip the table names from the targets of the both blocks
    // in order to check the equivalence the schemas of both blocks.
    Target [] leftStrippedTargets = PlannerUtil.stripTarget(leftBlock.getCurrentTargets());

    Schema outSchema = PlannerUtil.targetToSchema(leftStrippedTargets);
    setOp.setInSchema(left.getOutSchema());
    setOp.setOutSchema(outSchema);
    setOp.setOuter(left);
    setOp.setInner(right);

    if (isNoUpperProjection(stack)) {
//      ProjectionNode projectionNode = new ProjectionNode(leftStrippedTargets);
//      projectionNode.setSubNode(setOp);

//      localBlock.setProjectionNode(projectionNode);
      block.targetListManager = new TargetListManager(plan, leftStrippedTargets);
      block.targetListManager.setEvaluatedAll();
      block.targetListManager.getUpdatedTarget();
      block.setSchema(block.targetListManager.getUpdatedSchema());
    }

    return setOp;
  }

  private boolean verifySetStatement(OpType type, QueryBlock left, QueryBlock right)
      throws VerifyException {

    if (left.getCurrentTargets().length != right.getCurrentTargets().length) {
      throw new VerifyException("ERROR: each " + type.name() + " query must have the same number of columns");
    }

    Target [] targets1 = left.getCurrentTargets();
    Target [] targets2 = right.getCurrentTargets();

    for (int i = 0; i < targets1.length; i++) {
      if (!targets1[i].getDataType().equals(targets2[i].getDataType())) {
        throw new VerifyException("UNION types " + targets1[i].getDataType().getType() + " and "
            + targets2[i].getDataType().getType() + " cannot be matched");
      }
    }

    return true;
  }

  private SelectionNode buildSelectionNode(LogicalPlan plan, QueryBlock block, Selection selection,
                                           Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {
    // 1. init phase:

    // 2. build child plans:
    stack.push(ExprType.SELECTION);
    LogicalNode child = createPlanInternal(plan, block, selection.getChild(), stack);
    stack.pop();

    // 3. build this plan:
    EvalNode searchCondition = createEvalTree(plan, block.getName(), selection.getQual());
    SelectionNode selectionNode = new SelectionNode(searchCondition);

    // 4. set child plan, update input/output schemas:
    selectionNode.setSubNode(child);
    selectionNode.setInSchema(child.getOutSchema());
    selectionNode.setOutSchema(child.getOutSchema());

    // 5. update block information:
    block.setSelectionNode(selectionNode);

    return selectionNode;
  }

  /*===============================================================================================
    GROUP BY SECTION
   ===============================================================================================*/

  private LogicalNode buildGroupingPlan(LogicalPlan plan, QueryBlock block, Aggregation aggregation,
                                        Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {

    // 1. Initialization Phase:

    // 2. Build Child Plan Phase:
    stack.push(ExprType.GROUP_BY);
    LogicalNode child = createPlanInternal(plan, block, aggregation.getChild(), stack);
    stack.pop();

    // 3. Build This Plan:
    Aggregation.GroupElement [] groupElements = aggregation.getGroupSet();

    if (groupElements[0].getType() == GroupType.OrdinaryGroup) { // for group-by
      GroupElement annotatedElements [] = new GroupElement[groupElements.length];
      for (int i = 0; i < groupElements.length; i++) {
        annotatedElements[i] = new GroupElement(
            groupElements[i].getType(),
            annotateGroupingColumn(plan, block.getName(), groupElements[i].getColumns(), child));
      }
      GroupbyNode groupingNode = new GroupbyNode(annotatedElements[0].getColumns());
      if (aggregation.hasHavingCondition()) {
        groupingNode.setHavingCondition(
            createEvalTree(plan, block.getName(), aggregation.getHavingCondition()));
      }

      // 4. Set Child Plan and Update Input Schemes Phase
      groupingNode.setSubNode(child);
      block.setGroupingNode(groupingNode);
      groupingNode.setInSchema(child.getInSchema());

      // 5. Update Output Schema and Targets for Upper Plan

      return groupingNode;

    } else if (groupElements[0].getType() == GroupType.Cube) { // for cube by
      List<Column []> cuboids  = generateCuboids(annotateGroupingColumn(plan, block.getName(),
          groupElements[0].getColumns(), child));
      UnionNode topUnion = createGroupByUnion(plan, block, child, cuboids, 0);
      block.resolveGrouping();
      block.getTargetListManager().setEvaluatedAll();

      return topUnion;
    } else {
      throw new InvalidQueryException("Not support grouping");
    }
  }

  private UnionNode createGroupByUnion(final LogicalPlan plan,
                                       final QueryBlock block,
                                       final LogicalNode subNode,
                                       final List<Column []> cuboids,
                                       final int idx) {
    UnionNode union;
    try {
      if ((cuboids.size() - idx) > 2) {
        GroupbyNode g1 = new GroupbyNode(cuboids.get(idx));
        Target [] clone = cloneTargets(block.getCurrentTargets());

        g1.setTargets(clone);
        g1.setSubNode((LogicalNode) subNode.clone());
        g1.setInSchema(g1.getSubNode().getOutSchema());
        Schema outSchema = getProjectedSchema(plan, block.getCurrentTargets());
        g1.setOutSchema(outSchema);

        LogicalNode right = createGroupByUnion(plan, block, subNode, cuboids, idx+1);
        union = new UnionNode(g1, right);
        union.setInSchema(g1.getOutSchema());
        union.setOutSchema(g1.getOutSchema());

        return union;
      } else {
        GroupbyNode g1 = new GroupbyNode(cuboids.get(idx));
        Target [] clone = cloneTargets(block.getCurrentTargets());
        g1.setTargets(clone);
        g1.setSubNode((LogicalNode) subNode.clone());
        g1.setInSchema(g1.getSubNode().getOutSchema());
        Schema outSchema = getProjectedSchema(plan, clone);
        g1.setOutSchema(outSchema);

        GroupbyNode g2 = new GroupbyNode(cuboids.get(idx+1));
        clone = cloneTargets(block.getCurrentTargets());
        g2.setTargets(clone);
        g2.setSubNode((LogicalNode) subNode.clone());
        g2.setInSchema(g1.getSubNode().getOutSchema());
        outSchema = getProjectedSchema(plan, clone);
        g2.setOutSchema(outSchema);
        union = new UnionNode(g1, g2);
        union.setInSchema(g1.getOutSchema());
        union.setOutSchema(g1.getOutSchema());

        return union;
      }
    } catch (CloneNotSupportedException cnse) {
      LOG.error(cnse);
      throw new InvalidQueryException(cnse);
    }
  }

  /**
   * It transforms a list of column references into a list of annotated columns with considering aliased expressions.
   */
  private Column [] annotateGroupingColumn(LogicalPlan plan, String blockName,
                                           ColumnReferenceExpr[] columnRefs, LogicalNode child)
      throws VerifyException {
    Column [] columns = new Column[columnRefs.length];
    for (int i = 0; i < columnRefs.length; i++) {
      columns[i] = plan.findColumnFromChildNode(columnRefs[i], blockName, child);
    }

    return columns;
  }

  private static Target [] cloneTargets(Target [] sourceTargets)
      throws CloneNotSupportedException {
    Target [] clone = new Target[sourceTargets.length];
    for (int i = 0; i < sourceTargets.length; i++) {
      clone[i] = (Target) sourceTargets[i].clone();
    }

    return clone;
  }

  public static final Column [] ALL= Lists.newArrayList().toArray(new Column[0]);

  public static List<Column []> generateCuboids(Column [] columns) {
    int numCuboids = (int) Math.pow(2, columns.length);
    int maxBits = columns.length;

    List<Column []> cube = Lists.newArrayList();
    List<Column> cuboidCols;

    cube.add(ALL);
    for (int cuboidId = 1; cuboidId < numCuboids; cuboidId++) {
      cuboidCols = Lists.newArrayList();
      for (int j = 0; j < maxBits; j++) {
        int bit = 1 << j;
        if ((cuboidId & bit) == bit) {
          cuboidCols.add(columns[j]);
        }
      }
      cube.add(cuboidCols.toArray(new Column[cuboidCols.size()]));
    }
    return cube;
  }

  /*===============================================================================================
    SORT SECTION
   ===============================================================================================*/

  private SortNode buildSortPlan(LogicalPlan plan, QueryBlock block, Sort sort, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {

    // 1. Initialization Phase:
    // 2. Build Child Plans:
    stack.push(ExprType.SORT);
    LogicalNode child = createPlanInternal(plan, block, sort.getChild(), stack);
    child = insertGroupingIfUnresolved(plan, block.getName(), child, stack);
    stack.pop();

    // 3. Build this plan:
    SortSpec [] annotatedSortSpecs = new SortSpec[sort.getSortSpecs().length];
    Column column;
    Sort.SortSpec[] sortSpecs = sort.getSortSpecs();
    for (int i = 0; i < sort.getSortSpecs().length; i++) {
      column = plan.findColumnFromChildNode(sortSpecs[i].getKey(), block.getName(), child);
      annotatedSortSpecs[i] = new SortSpec(column, sortSpecs[i].isAscending(),
          sortSpecs[i].isNullFirst());
    }
    SortNode sortNode = new SortNode(annotatedSortSpecs);

    // 4. Set Child Plan, Update Input/Output Schemas:
    sortNode.setSubNode(child);
    sortNode.setInSchema(child.getOutSchema());
    sortNode.setOutSchema(child.getOutSchema());

    return sortNode;
  }

  private LimitNode buildLimitPlan(LogicalPlan plan, QueryBlock block, Limit limit, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {
    // build child plans
    stack.push(ExprType.LIMIT);
    LogicalNode child = createPlanInternal(plan, block, limit.getChild(), stack);
    stack.pop();

    // build limit plan
    EvalNode firstFetchNum = createEvalTree(plan, block.getName(), limit.getFetchFirstNum());
    firstFetchNum.eval(null, null, null);
    LimitNode limitNode = new LimitNode(firstFetchNum.terminate(null).asInt8());

    // set child plan and update input/output schemas.
    limitNode.setSubNode(child);
    limitNode.setInSchema(child.getOutSchema());
    limitNode.setOutSchema(child.getOutSchema());
    return limitNode;
  }

  /*===============================================================================================
    PROJECTION SECTION
   ===============================================================================================*/

  private LogicalNode buildProjectionNode(LogicalPlan plan, QueryBlock block,
                                          Projection projection, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {

    //1: init Phase
    block.setProjection(projection);
    if (!projection.isAllProjected()) {
      block.targetListManager = new TargetListManager(plan, projection.size());
    }

    if (!projection.hasChild()) {
      EvalExprNode evalOnly =
          new EvalExprNode(annotateTargets(plan, block.getName(), projection.getTargets()));
      evalOnly.setOutSchema(getProjectedSchema(plan, evalOnly.getExprs()));
      block.setProjectionNode(evalOnly);
      for (int i = 0; i < evalOnly.getTargets().length; i++) {
        block.targetListManager.updateTarget(i, evalOnly.getTargets()[i]);
      }
      return evalOnly;
    }

    // 2: Build Child Plans
    stack.push(ExprType.PROJECTION);
    LogicalNode child = createPlanInternal(plan, block, projection.getChild(), stack);
    child = insertGroupingIfUnresolved(plan, block.getName(), child, stack);
    stack.pop();

    // All targets must be evaluable before the projection.
    Preconditions.checkState(block.getTargetListManager().isAllEvaluated(),
        "Some targets cannot be evaluated in the query block \"%s\"", block.getName());

    ProjectionNode projectionNode;
    if (projection.isAllProjected()) {
      projectionNode = new ProjectionNode(PlannerUtil.schemaToTargets(child.getOutSchema()));
    } else {
      projectionNode = new ProjectionNode(block.getCurrentTargets());
    }

    block.setProjectionNode(projectionNode);
    projectionNode.setOutSchema(getProjectedSchema(plan, projectionNode.getTargets()));
    projectionNode.setInSchema(child.getOutSchema());
    projectionNode.setSubNode(child);

    if (projection.isDistinct() && block.hasGrouping()) {
      throw new VerifyException("Cannot support grouping and distinct at the same time");
    } else {
      if (projection.isDistinct()) {
        Schema outSchema = projectionNode.getOutSchema();
        GroupbyNode dupRemoval = new GroupbyNode(outSchema.toArray());
        dupRemoval.setTargets(block.getTargetListManager().getTargets());
        dupRemoval.setInSchema(child.getOutSchema());
        dupRemoval.setOutSchema(outSchema);
        dupRemoval.setSubNode(child);
        projectionNode.setSubNode(dupRemoval);
      }
    }

    return projectionNode;
  }

  /**
   * Insert a group-by operator before a sort or a projection operator.
   * It is used only when a group-by clause is not given.
   */
  private LogicalNode insertGroupingIfUnresolved(LogicalPlan plan, String blockName,
                                                 LogicalNode child, Stack<ExprType> stack) {
    QueryBlock block = plan.getBlock(blockName);
    if (!block.isGroupingResolved()) {
      GroupbyNode groupbyNode = new GroupbyNode(new Column[] {});
      groupbyNode.setTargets(block.getCurrentTargets());
      groupbyNode.setSubNode(child);
      groupbyNode.setInSchema(child.getOutSchema());

      plan.postVisit(blockName, groupbyNode, stack);
      block.checkAndSetEvaluatedTargets(groupbyNode);
      return groupbyNode;
    } else {
      return child;
    }
  }

  private boolean isNoUpperProjection(Stack<ExprType> stack) {
    for (ExprType node : stack) {
      if (!( (node == ExprType.PROJECTION) || (node == ExprType.GROUP_BY) || (node == ExprType.JOIN) )) {
        return false;
      }
    }

    return true;
  }

  /*===============================================================================================
    Data Definition Language (DDL) SECTION
   ===============================================================================================*/

  private LogicalNode buildCreateTable(LogicalPlan plan, QueryBlock block, CreateTable expr, Stack<ExprType> stack)
      throws VerifyException, CloneNotSupportedException {

     String tableName = expr.getTableName();

    if (expr.hasSubQuery()) {
      stack.add(ExprType.CREATE_TABLE);
      LogicalNode subQuery = createPlanInternal(plan, block, expr.getSubQuery(), stack);
      stack.pop();
      StoreTableNode storeNode = new StoreTableNode(tableName);
      storeNode.setSubNode(subQuery);

      if (expr.hasTableElements()) {
        Schema schema = convertTableElementsSchema(expr.getTableElements());
        storeNode.setOutSchema(schema);
      } else {
        storeNode.setOutSchema(subQuery.getOutSchema());
      }
      storeNode.setInSchema(subQuery.getOutSchema());

      if (expr.hasStorageType()) {
        storeNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        // TODO - it should be configurable.
        storeNode.setStorageType(CatalogProtos.StoreType.CSV);
      }

      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        storeNode.setOptions(options);
      }

      return storeNode;
    } else {
      CreateTableNode createTableNode = new CreateTableNode(expr.getTableName(),
          convertTableElementsSchema(expr.getTableElements()));

      if (expr.isExternal()) {
        createTableNode.setExternal(true);
      }

      if (expr.hasStorageType()) {
        createTableNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        // TODO - it should be configurable.
        createTableNode.setStorageType(CatalogProtos.StoreType.CSV);
      }
      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        createTableNode.setOptions(options);
      }

      if (expr.hasLocation()) {
        createTableNode.setPath(new Path(expr.getLocation()));
      }

      return createTableNode;
    }
  }

  /**
   * It transforms table definition elements to schema.
   *
   * @param elements to be transformed
   * @return schema transformed from table definition elements
   */
  private Schema convertTableElementsSchema(CreateTable.ColumnDefinition [] elements) {
    Schema schema = new Schema();

    Column column;
    for (CreateTable.ColumnDefinition columnDefinition: elements) {
      column = new Column(columnDefinition.getColumnName(),
          TajoDataTypes.Type.valueOf(columnDefinition.getDataType()));
      schema.addColumn(column);
    }

    return schema;
  }

  private LogicalNode buildDropTable(DropTable dropTable) {
    DropTableNode dropTableNode = new DropTableNode(dropTable.getTableName());
    return dropTableNode;
  }

  /*===============================================================================================
    Expression SECTION
   ===============================================================================================*/

  public EvalNode createEvalTree(LogicalPlan plan, String blockName, final Expr expr)
      throws VerifyException {
    switch(expr.getType()) {

      // constants
      case Literal:
        LiteralValue literal = (LiteralValue) expr;
        switch (literal.getValueType()) {
          case String:
            return new ConstEval(DatumFactory.createText(literal.getValue()));
          case Unsigned_Integer:
            return new ConstEval(DatumFactory.createInt4(literal.getValue()));
          case Unsigned_Large_Integer:
            return new ConstEval(DatumFactory.createInt8(literal.getValue()));
          case Unsigned_Float:
            return new ConstEval(DatumFactory.createFloat4(literal.getValue()));
          default:
            throw new RuntimeException("Unsupported type: " + literal.getValueType());
        }

        // unary expression
      case Not:
        NotExpr notExpr = (NotExpr) expr;
        return new NotEval(createEvalTree(plan, blockName, notExpr.getChild()));

      // binary expressions
      case LikePredicate:
        LikePredicate like = (LikePredicate) expr;
        FieldEval field = (FieldEval) createEvalTree(plan, blockName, like.getColumnRef());
        ConstEval pattern = (ConstEval) createEvalTree(plan, blockName, like.getPattern());
        return new LikeEval(like.isNot(), field, pattern);

      case Is:
        break;

      case And:
      case Or:
      case Equals:
      case NotEquals:
      case LessThan:
      case LessThanOrEquals:
      case GreaterThan:
      case GreaterThanOrEquals:
      case Plus:
      case Minus:
      case Multiply:
      case Divide:
      case Modular:
        BinaryOperator bin = (BinaryOperator) expr;
        return new BinaryEval(exprTypeToEvalType(expr.getType()),
            createEvalTree(plan, blockName, bin.getLeft()),
            createEvalTree(plan, blockName, bin.getRight()));

      // others
      case Column:
        return createFieldEval(plan, blockName, (ColumnReferenceExpr) expr);

      case CountRowsFunction:
        FunctionDesc countRows = catalog.getFunction("count", new DataType[] {});

        try {
          plan.getBlock(blockName).setHasGrouping();

          return new AggFuncCallEval(countRows, (AggFunction) countRows.newInstance(),
              new EvalNode [] {});
        } catch (InternalException e) {
          throw new UndefinedFunctionException(CatalogUtil.
              getCanonicalName(countRows.getSignature(), new DataType[] {}));
        }

      case CountValueFunction:
      case Function:
        FunctionExpr function = (FunctionExpr) expr;
        // Given parameters
        Expr [] params = function.getParams();
        EvalNode [] givenArgs = new EvalNode[params.length];
        DataType[] paramTypes = new DataType[params.length];

        if (expr.getType() == OpType.CountValueFunction) {
          givenArgs[0] = createEvalTree(plan, blockName, params[0]);
          paramTypes[0] = CatalogUtil.newDataTypeWithoutLen(TajoDataTypes.Type.ANY);
        } else {
          for (int i = 0; i < params.length; i++) {
            givenArgs[i] = createEvalTree(plan, blockName, params[i]);
            paramTypes[i] = givenArgs[i].getValueType()[0];
          }
        }

        if (!catalog.containFunction(function.getSignature(), paramTypes)) {
            throw new UndefinedFunctionException(CatalogUtil.
                getCanonicalName(function.getSignature(), paramTypes));
        }

        FunctionDesc funcDesc = catalog.getFunction(function.getSignature(), paramTypes);

        try {
          if (funcDesc.getFuncType() == CatalogProtos.FunctionType.GENERAL)

            return new FuncCallEval(funcDesc,
                (GeneralFunction) funcDesc.newInstance(), givenArgs);
          else {
            plan.getBlock(blockName).setHasGrouping();
            return new AggFuncCallEval(funcDesc,
                (AggFunction) funcDesc.newInstance(), givenArgs);
          }
        } catch (InternalException e) {
          e.printStackTrace();
        }

      case CaseWhen:
        CaseWhenPredicate caseWhenExpr = (CaseWhenPredicate) expr;
        return createCaseWhenEval(plan, blockName, caseWhenExpr);

      case IsNullPredicate:
        IsNullPredicate nullPredicate = (IsNullPredicate) expr;
        return new IsNullEval(nullPredicate.isNot(),
            createFieldEval(plan, blockName, nullPredicate.getColumnRef()));

      default:
    }
    return null;
  }

  private FieldEval createFieldEval(LogicalPlan plan, String blockName,
                                    ColumnReferenceExpr columnRef) throws VerifyException {
    Column column;
    if (columnRef.hasTableName()) {
      column = plan.findColumnFromRelation(blockName, columnRef.getTableName(), columnRef.getName());
    } else {
      column = plan.suspectColumn(blockName, columnRef.getName());
    }
    return new FieldEval(column);
  }

  private static Type exprTypeToEvalType(OpType type) {
    switch (type) {
      case And: return Type.AND;
      case Or: return Type.OR;
      case Equals: return Type.EQUAL;
      case NotEquals: return Type.NOT_EQUAL;
      case LessThan: return Type.LTH;
      case LessThanOrEquals: return Type.LEQ;
      case GreaterThan: return Type.GTH;
      case GreaterThanOrEquals: return Type.GEQ;
      case Plus: return Type.PLUS;
      case Minus: return Type.MINUS;
      case Multiply: return Type.MULTIPLY;
      case Divide: return Type.DIVIDE;
      case Modular: return Type.MODULAR;
      case Column: return Type.FIELD;
      case Function: return Type.FUNCTION;
      default: throw new RuntimeException("Unsupported type: " + type);
    }
  }

  public CaseWhenEval createCaseWhenEval(LogicalPlan plan, String blockName,
                                              CaseWhenPredicate caseWhen) throws VerifyException {
    CaseWhenEval caseEval = new CaseWhenEval();
    EvalNode condition;
    EvalNode result;

    for (CaseWhenPredicate.WhenExpr when : caseWhen.getWhens()) {
      condition = createEvalTree(plan, blockName, when.getCondition());
      result = createEvalTree(plan, blockName, when.getResult());
      caseEval.addWhen(condition, result);
    }

    if (caseWhen.hasElseResult()) {
      caseEval.setElseResult(createEvalTree(plan, blockName, caseWhen.getElseResult()));
    }

    return caseEval;
  }

  Target [] annotateTargets(LogicalPlan plan, String blockName,
                                       org.apache.tajo.algebra.Target [] targets)
      throws VerifyException {
    Target annotatedTargets [] = new Target[targets.length];

    for (int i = 0; i < targets.length; i++) {
      annotatedTargets[i] = createTarget(plan, blockName, targets[i]);
    }
    return annotatedTargets;
  }

  Target createTarget(LogicalPlan plan, String blockId,
                             org.apache.tajo.algebra.Target target) throws VerifyException {
    if (target.hasAlias()) {
      return new Target(createEvalTree(plan, blockId, target.getExpr()),
          target.getAlias());
    } else {
      return new Target(createEvalTree(plan, blockId, target.getExpr()));
    }
  }

  /**
   * It transforms a list of targets to schema. If it contains anonymous targets, it names them.
   */
  static Schema getProjectedSchema(LogicalPlan plan, Target [] targets) {
    Schema projected = new Schema();
    for(Target t : targets) {
      DataType type = t.getEvalTree().getValueType()[0];
      String name;
      if (t.hasAlias()) {
        name = t.getAlias();
      } else if (t.getEvalTree().getName().equals("?")) {
        name = plan.newAnonymousColumnName();
      } else {
        name = t.getEvalTree().getName();
      }
      projected.addColumn(name,type);
    }

    return projected;
  }
}