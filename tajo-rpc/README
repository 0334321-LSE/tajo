2012.01.13

This document is deprecated.

See the RPC Framework part on docs

(http://dbserver.korea.ac.kr/docs/display/NTA/RPC+Framework)

==================================================================

RPC Framework Ver 0.1

Author : DaeJin Choi (soyenze@gmail.com)
1. RPC Framework 소개
본 Framework은 RPC (Remote Procedure Call)를 User가 쉽게 이용할 수 있도록 구현한 프로젝트 입니다.

기본적으로 RPC란 클라이언트는 이용할 함수(Procedure)의 Interface만 알고있고,

실질적인 구현은 서버에 되어있으면서, 클라이언트가 서버로 접속하여 원하는 함수(Procedure)를 실행하는 방식입니다. 

참고) http://en.wikipedia.org/wiki/Remote_procedure_call
2. RPC Framework 구조 및 동작
작성중입니다.

3. Framework 이용예제
본 RPC Framework은 Blocking과 Async 두가지 방식으로 이용할 수 있습니다.

이용단계는 크게

Parameter Type으로 이용될 Protocol buffer를 만드는과정

Client/Server Interface 및 실제 작동할 함수작성

Server파트 실행부분 작성

Client파트 실행부분 작성

이렇게 4단계로 나누어집니다.

 

Blocking 방식으로 RPC통신 구현하는 방법
( 참고소스 : rpc/src/test/java/nta/rpc/TestProtoParamBlockingRpc.java )

1. .proto 파일을 생성하고 build를 통해서 .java 파일을 generate합니다.

.proto file 참고: rpc/src/main/proto/DummyProtos.proto

rpc/pom.xml 파일에보면 Protocol buffer를 빌드하기 위한 부분이 있습니다.
( 추후 설명 추가 예정 )

<argument>src/main/proto/DummyProtos.proto</argument>
이 부분을 참고하여 generate할 source를 추가해주시면 됩니다.

Protocol buffer 참고

2. Server와 Client의 Interface를 제작하고 이것들을 Implement하는 class를 작성합니다.

JIRA Issue NTA-338이 solve되면 바뀔 수 있습니다.

Source Code
public static interface DummyServerInterface {
 
    public MulResponse mul(MulRequest request);
 
  }
 
  public static interface DummyClientInterface {
 
    public void mul(MulRequest request);
 
  }
 
  public static class DummyServer implements DummyServerInterface {
 
 
    @Override
    public MulResponse mul(MulRequest request) {
      int x1 = request.getX1();
      int x2 = request.getX2();
 
 
      int result = x1 * x2;
 
 
      MulResponse rst = MulResponse.newBuilder().setResult(result).build();
 
      return rst;
    }
  }
현재까지는 Client의 Interface는 위의 DummyServerInterface내의 함수와 같은 "(Response Obj) function name (Request Obj)" 형태를 지켜야 합니다.

3. Server Part

Source Code
ProtoParamRpcServer server =
NettyRpc.getProtoParamRpcServer(2에서 제작한 Server class의 instance,
new InetSocketAddress(PORT번호)); // InetSocketAddress(Port번호)는 localhost:port에 호출됩니다.
                                 // InetSocketAddress("ip", port번호)로 원격으로도 이용가능합니다.
server.start(); // 서버 실행
server.shutdown(); // 서버 종료
4. Client Part

4.1 Proxy instance 생성

서버랑 통신하기 위한 Proxy instance를 생성합니다.

Source Code
DummyServerInterface proxy =
(DummyServerInterface) NettyRpc.getProtoParamBlockingRpcProxy(
DummyServerInterface.class, new InetSocketAddress(10010));
(WARNING) 예제에는 편의를 위해서 Client가 이용함에도 불구하고 Server Interface를 그대로 가져다가 썼지만 네이밍상 문제가 있다고 판단하시면 Client Interface를 쓰시되 내부 Interface function의 형태는 2번의 형태를 지켜주셔아 합니다.(즉, DummyServerInterface -> DummyClientInterface로 바꾸시고, 그 클래스내의 method의 parameter값을 server interface와 동일하게 바꿔 주시면 됩니다)

4.2 Request Data 빌드

Protocol buffer function 을 이용해서 request instance를 build합니다.

Source Code
MulRequest req = MulRequest.newBuilder().setX1(10).setX2(20).build();
4.3 Procedure call

Source Code
MulResponse re = proxy.mul(req);
interface function을 통해 호출하고 결과값으로 받은 인자를 가지고 작업을 계속 진행합니다.

 

Async 방식으로 RPC통신 구현하는 방법
( 참고소스 : rpc/src/test/java/nta/rpc/TestProtoParamAsyncRpc.java )

1. .proto 파일을 생성하고 build를 통해서 .java 파일을 generate합니다.

Blocking방식의 1과 동일

2. Server와 Client의 Interface를 제작하고 이것들을 Implement하는 class를 작성합니다.

Source Code
public static interface DummyServerInterface {
 
    public MulResponse mul(MulRequest request);
 
  }
 
  public static interface DummyClientInterface {
 
    public void mul(Callback<MulResponse> callback, MulRequest request);
 
  }
 
  public static class DummyServer implements DummyServerInterface {
 
    @Override
 
    public MulResponse mul(MulRequest request) {
 
      int x1 = request.getX1();
 
      int x2 = request.getX2();
 
      int result = x1 * x2;
 
      MulResponse rst = MulResponse.newBuilder().setResult(result).build();
 
      return rst;
 
    }
 
  }
Server는 Blocking과 동일합니다.

Client의 경우에는 Interface가 반드시 " void 함수명(Callback<return타입> instance, request type) " 형태어야 합니다.

3. Server Part

Blocking과 완전 동일(즉, 서버는 언제나 non blocking이고 클라이언트가 응답을 받을때까지 기다리느냐 그렇지 않느냐로 Blocking/Async가 갈립니다.)

4. Client Part

4.1 Proxy instance 생성

Source Code
DummyClientInterface proxy =
(DummyClientInterface) NettyRpc.getProtoParamAsyncRpcProxy(
DummyServerInterface.class, DummyClientInterface.class,
new InetSocketAddress(10011));
4.2 Request Data 빌드

Protocol buffer function 을 이용해서 request instance를 build합니다.

4.3 Callback instance setting

Source Code
Callback cb = new Callback<MulResponse>();
결과로 받아야할 클래스 데이터를 Callback에 넣습니다. 나중에 서버로부터 응담이 오는 데이터들은 모두 이 Callback class를 이용해서 처리가 됩니다.

4.4 Procedure call

Source Code
proxy.mul(cb, req);
interface function을 통해 호출합니다. 서버로부터 응답이오면 Callback변수에 할당이 되고, 그전까지는 non-blocking상태로 동작할 수 있습니다.

4.5 didGetResponse / get 등의 Callback class내의 interface를 이용한 결과 얻기

Source Code
MulResponse resp = (MulResponse) cb.get();
서버와의 통신이 끝났을 경우에 리턴된 값을 받기 위해서 get함수를 호출하거나 통신이 성공했는지의 여부로 isSuccess함수를 호출할 수 있습니다. (이 때, get함수는 데이터를 받아올때까지 계속 blocking상태로 기다리게 됩니다. 따라서 Async의 장점을 최대한 살리려면 단순히 get만을 이용하는것이 아니라 didGetResponse, isSuccess 등의 interface 함수와 동시에 잘 활용해야 합니다.

4. Future work
서버로부터 아예 무응답일 경우의 Timeout 처리.
java primitive type들에 대해서 protocol buffer없이도 이용할 수 있도록 처리
multi-arguments, multi-type들에 대해서 처리가 가능하도록 함
exception들에 대한 처리방식 확립
